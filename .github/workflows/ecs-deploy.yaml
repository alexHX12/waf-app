name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

env:
  AWS_REGION: eu-central-1
  ECR_FRONTEND_REPOSITORY: waf-frontend
  ECR_BACKEND_REPOSITORY: waf-backend
  ECR_TEST_APP_REPOSITORY: waf-test-app
  ECS_FRONTEND_SERVICE: WafAppFrontendService
  ECS_BACKEND_SERVICE: WafAppFrontendService
  ECS_TEST_APP_SERVICE: WafAppFrontendService
  ECS_CLUSTER: WafAppCluster

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Deploy frontend to ECR
        id: frontend-deploy
        working-directory: ./frontend/waf-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          npm install -g @angular/cli@latest
          npm install
          ng build
          docker build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest ../
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest"

      - name: Deploy backend to ECR
        id: backend-deploy
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          mv ./waf-httpd-vhosts.prod.conf ./waf-httpd-vhosts.conf
          mv ./waf-backend/.env.prod ./waf-backend/.env
          docker build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest"

      - name: Deploy test app to ECR
        id: test-app-deploy
        working-directory: ./test-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_TEST_APP_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_TEST_APP_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_TEST_APP_REPOSITORY:latest"

      - name: Reload tasks
        id: reload-tasks
        run: |
          for taskarn in $(aws ecs list-tasks --cluster $ECS_CLUSTER --desired-status RUNNING --output text --query 'taskArns'); do aws ecs stop-task --cluster $ECS_CLUSTER --task $taskarn; done;
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_BACKEND_SERVICE --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_TEST_APP_SERVICE --force-new-deployment
