name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

env:
  AWS_REGION: eu-central-1
  ECR_FRONTEND_REPOSITORY: waf-frontend
  ECR_BACKEND_REPOSITORY: waf-backend
  ECR_TEST_APP_REPOSITORY: waf-test-app
  ECS_FRONTEND_SERVICE: WafAppFrontendService
  ECS_BACKEND_SERVICE: WafAppFrontendService
  ECS_TEST_APP_SERVICE: WafAppFrontendService
  ECS_CLUSTER: WafAppCluster

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run:
          docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_TEST_APP_REPOSITORY:$IMAGE_TAG ./test-app
          docker push $ECR_REGISTRY/$ECR_TEST_APP_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_TEST_APP_REPOSITORY:$IMAGE_TAG"

      - name: Reload tasks
        id: reload-tasks
        run:
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_BACKEND_SERVICE --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_TEST_APP_SERVICE --force-new-deployment
